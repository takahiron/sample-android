name: deploy to deploygate

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        description: which one do you use?
        options:
          - Release
          - Debug
      version_name:
        type: string
        required: true
        description: release version name
      version_code:
        type: string
        required: true
        description: release version code

env:
  ENVIRONMENT: ${{ inputs.environment }}
  VERSION_NAME: ${{ inputs.version_name }}
  VERSION_CODE: ${{ inputs.version_code }}
  RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
  RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
  RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#      - uses: actions/checkout@v1
#      - name: set up JDK 1.8
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.8
  deploy:
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v3
       with:
         ref: ${{ github.base_ref }}
     - name: set version_name and version_code
       uses: Devofure/advance-android-version-actions@v1.4
       with:
         gradlePath: app/build.gradle
         versionName: ${{ inputs.version_name }}
         versionCode: ${{ inputs.version_code }}
     - name: confirm version_name and version_code
       run: |
         git diff
         echo $ENV
       env:
         ENV: "Release"
     - name: set up JDK 11
       uses: actions/setup-java@v3
       with:
         distribution: 'temurin'
         java-version: '11'
         check-latest: true
     - name: make gradlew executed
       run: chmod +x ./gradlew
     - name: set keystore
       run: echo '${{ secrets.RELEASE_SECRET_KEY }}' | base64 -d > ./release.keystore
     - name: Build App Bundle
       run: ./gradlew assemble$ENV
       env:
         ENV: ${{ env.ENVIRONMENT }}
     - name: deploygate
       run: |
         curl \
            -H "Authorization: token ${{secrets.DEPLOYGATE_API_TOKEN}}" \
            -F "file=@app/build/outputs/apk/release/app-release.apk" \
            -F "message=test" \
            -v "https://deploygate.com/api/users/${{ secrets.DEPLOYGATE_USER }}/apps"
  notice:
    runs-on: ubuntu-latest
    needs: 
      - deploy
    steps:
      - name: Send GitHub Action trigger data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "github actions: status ${{ job.status}} : environment: ${{ env.ENVIRONMENT }}, versions: ${{ env.VERSION_NAME }} (${{ inputs.version_code }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
